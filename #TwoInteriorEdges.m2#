newPackage(
        "TwoInteriorEdges",
        Version => "0.1", 
        Date => "",
        Authors => {{Name => "", 
                  Email => "", 
                  HomePage => ""}},
        Headline => "specialized code to investigate Beihui's counterexamples",
        DebuggingMode => true
        )

export {
    "bVectors", -- probably don't export this
    "coeffMatrixLinforms",
    "computeCounterexampleModp",
    "containsVertex",
    "degreePart",
    "H0matrix",
    "H0bettiModp",
    "HFModp",
    "niceSyzygyMatrix", -- note: only in r == 3 (4) situation so far
    "niceH0Presentation",
    "standardGraph",
    "linearForm",
    "normalizedLinforms",
    "VEcoeffMatLin",
    "VEmatrixStandard"
    }

degreePart = method()
degreePart(ZZ, Matrix) := Matrix => (deg,f) -> (
    lift(matrix basis(deg,f), coefficientRing ring f)
    )

standardGraph = () -> (
    -- return a (V, E) pair
    V := {
        {-2,0}, {0,-1}, {2,0},  -- interior vertices, in line order
        {0,-2}, {0,2}, -- connect to 0th vertex
        {0,2}, -- connect to vertex #1
        {0,2}, {0,-2} -- connect to vertex #2
        };
    E := {{0,1}, {1,2}, -- interior edges
        {0,3}, {0,4}, -- connect to vertex #0
        {1,5}, -- connect to vertex #1
        {2,6}, {2,7} -- connect to vertex #2
        };
    (V,E)
    )

VEmatrixStandard = () -> (
    -- return the matrix how V-E corresponded in the standardGraph
    matrix{
	{1,0,-1,-1,0,0,0},
	{1,-1,0,0,-1,0,0},
	{0,1,0,0,0,-1,-1}}
    )

containsVertex = method()
-- given an index 'v' into the list of vertices V, find the edges in E incident to v.
containsVertex(ZZ, List) := (v, E) -> positions(E, e -> member(v, e))

linearForm = method(Options => {Ring => QQ[getSymbol "x", getSymbol "y", getSymbol "z"]})
linearForm(List, List) := opts -> (e, V) -> (
    -- e is a list of 2 indices into V, generally an element of E
    -- returns a linear form in the ring opts.Ring
    R := opts#Ring;
    x := R_0;
    y := R_1;
    z := R_2;
    f := det matrix{{x,y,z},append(V_(e_0), 1), append(V_(e_1), 1)};
    (trim ideal f)_0
    )

coeffMatrixLinforms = method(Options => {Ring => QQ[getSymbol "x", getSymbol "y", getSymbol "z"]})
coeffMatrixLinforms(List) := opts -> (linforms) -> (
    R := opts#Ring;
    for lins in linforms list for i from 0 to 2 list coefficient (R_i,lins)
    )

VEcoeffMatLin = (linforms) -> (
    -- return the 9x7 matrix for the standard graph
    M:=VEmatrixStandard();
    N:=matrix coeffMatrixLinforms(linforms);
    result := transpose matrix for j from 0 to 6 list flatten for i from 0 to 2 list for k from 0 to 2 list M_(i,j)*N_(j,k);
    lift(result, ZZ)
    )

normalizedLinforms = method()
normalizedLinforms(List) := (linforms) ->(
    -- input a list of 7 linear forms, generated by the standard graph
    -- return a "normalized" list
    K := syz VEcoeffMatLin(linforms);
    newforms := for i from 0 to (rank target K)-1 list linforms_i * K_(i,0);
    -- now find the lcm of the denominators.
    --cfs := lift(last coefficients transpose matrix {newforms}, QQ);
    --a := (flatten entries cfs)/denominator//lcm;
    --a * newforms
    newforms
    )
----------------------------
-- Hal's code for the case r == 3 (mod 4), i.e. r = 4k + 3.
-- consider x^(r+1), (x-y)^(r+1), y^(r+1).
-- considering syzygies of degree (r+1)/2 = 2k+2
-- we want a nice basis for those B s.t. 
--   A x^(r+1) + B * (x-y)^(r+1) + C * y^(r+1) = 0.
-- we know there are two in degree 2k+2, we want "nice" ones.
-- Note, given a vector b0, b1, ..., b_(2k+2) (in coeff field)
-- s.t.
--   B = b0 x^(2k+2) + b1 x^(2k+1) y + ... + b_(2k+2) y^(2k+2)
-- consider the equations
--  B * (x-y)^(r+1) is in (x^(r+1), y^(r+1)).
-- we get dim 2 solution set. And for B fixed, we obtain a unique A, C.
bVectors = method()
bVectors ZZ := (k) -> (
    -- generate the matrix of coefficients of ??
    A0 := matrix apply(2*k+1,i->(
            apply(2*k+3,j->(
                    ((-1)^(2*k+3+i-j))*binomial(4*k+4,2*k+3+i-j)
                ))
            ));
    A1 := submatrix(A0,{0..k,k+2..2*k+2}); -- Adrop in Hal's notes
    C := transpose syz A1;
    firstHalf := submatrix(C,{0..k});
    secondHalf := submatrix(C,{k+1..2*k+1});
    K1 := firstHalf|matrix{{0}}|secondHalf;
    Mat1 := A0||K1;
    K2 := transpose syz Mat1;
    K1 || K2
    )

niceSyzygyMatrix = method()
niceSyzygyMatrix(ZZ, List) := (k, linforms) -> (
    if #linforms != 2 or ring first linforms =!= ring last linforms then
      error "expected two linear forms";
    R := ring first linforms;
    -- return, over R, a 3 x 2 syzygy matrix for
    -- (x^(r+1), (x-y)^(r+1), y^(r+1)), in the case when r = 4k+3.
    L := bVectors k; -- 2 row matrix
    R2 := QQ (monoid [getSymbol "a", getSymbol "b"]);
    a := R2_0;
    b := R2_1;
    Rdeg := super basis(2*k+2, R2);
    gamma := Rdeg * (transpose L);
    S12 := (-(a-b)^(4*k+4) * gamma) // matrix{{a^(4*k+4), b^(4*k+4)}};
    phi := map(R, R2, linforms);
    phi(S12^{0} || gamma || S12^{1})
    )

TEST ///
-*
  restart
  debug needsPackage "TwoInteriorEdges"
*-
  bVectors 0
  bVectors 1
  bVectors 2

  -- note: another way to compute A0 in bVectors.
  k = 1
  S = QQ[x,y,b_0..b_(2*k+2), MonomialOrder=>Lex]
  B = sum for i from 0 to 2*k+2 list b_i * y^i * x^(2*k+2-i)
  F = B * (x-y)^(4*k+4)
  F = (F % x^(4*k+4)) % y^(4*k+4)
  cfs = last coefficients(F, Variables => {x,y})
  bs = matrix {for i from 0 to 2*k+2 list b_i}
  M = lift(contract(bs, cfs), QQ)

  R = QQ[x,y,z]
  Z = niceSyzygyMatrix(0,{x,y})
  assert(matrix"x4,(x-y)4,y4" * Z == 0)

  lins = {x-y,y+2*x}
  Z = niceSyzygyMatrix(0, lins)
  assert(matrix{{lins_0^4, (lins_0-lins_1)^4, lins_1^4}} * Z == 0)


  (V,E) = standardGraph()
  assert(E == {{0, 1}, {1, 2}, {0, 3}, {0, 4}, {1, 5}, {2, 6}, {2, 7}})
  linforms = for e in E list linearForm(e, V, Ring => R);
  
  niceH0Presentation(0, linforms)
///

///
-- XXX TEST 05/15/19
restart
needsPackage "TwoInteriorEdges"
  R = QQ[x,y,z]
  (V,E) = standardGraph()
  linforms = for e in E list linearForm(e, V, Ring => R);
  normalizedLinforms linforms  
  niceH0Presentation(0, linforms)
  M = niceH0Presentation(1, linforms)
  degreePart(16, M);
  rank degreePart(16, M)
  VEcoeffMatLin linforms  
-- TEST 05/16/19
needsPackage "TwoInteriorEdges"
R=QQ[x,y,z]
(V,E) = standardGraph()
V={{-20,0},{0,-10},{20,0},{-3,-20},{9,20},{0,20},{9,20},{-3,-20}};
linforms = for e in E list linearForm(e, V, Ring => R);
M = niceH0Presentation(6, linforms);
for d from 54 to 61 list hilbertFunction(d, coker M)
for r from 1 to 10 list computeCounterexampleModp(r,V,E);
netList for i from 0 to 38 list for d from 2*i+1 to floor(9*i/4+2) list HFModp(d,2*i+1,V,E)
///

niceH0Presentation = method()
niceH0Presentation(ZZ, List) := (k, linforms) -> (
    -- expect: 7 linear forms
    -- (l0,l2,l3), (l0,l1,l4), (l1,l5,l6) is at each of the 3 vertices.--we may need to check it
    -- NOTE: l3 must be l0-l2
    --   l4 = l0-l1
    --   l6 = l1-l5 (we think).
    -- we normalize the list so this is true --B.Y. 5/14/19
    R := ring linforms_0;
    r := 4*k+3;
    nlinforms := normalizedLinforms(linforms);
    Z0 := niceSyzygyMatrix(k, nlinforms_{0,2});
    Z1 := niceSyzygyMatrix(k, nlinforms_{0,1});
    Z2 := niceSyzygyMatrix(k, nlinforms_{1,6});
    --print (Z0, Z1, Z2);
    M := (submatrix(Z0, {0}, ) || matrix{{0,0}}) 
         | submatrix(Z1, {0,2}, ) 
         | (matrix{{0,0}} || submatrix(Z2, {0}, ));
    map(R^{2: -r-1},,M)
    )
----------------------------

H0matrix = method(Options => options linearForm)
H0matrix(ZZ, List, List) := opts -> (r,V,E) -> (
    -- assumptions: 
    --  (1) the first 3 vertices of V are the interior ones, in a line
    --  (2) each of these vertices is connected to precisely 3 others.
    S := opts#Ring;
    e0 := containsVertex(0, E); 
    e1 := containsVertex(1, E);
    e2 := containsVertex(2, E);
    if #e0 =!= 3 or #e1 =!= 3 or #e2 =!= 3 then error "expected 3 edges from the first three vertices";
    linforms := for e in E list linearForm(e, V, opts);
    Z0 := syz matrix{(linforms_e0)/(f -> f^(r+1))};
    Z1 := syz matrix{(linforms_e1)/(f -> f^(r+1))};
    Z2 := syz matrix{(linforms_e2)/(f -> f^(r+1))};
    M := (submatrix(Z0, {0}, ) || matrix{{0,0}}) 
         | submatrix(Z1, {0,1}, ) 
         | (matrix{{0,0}} || submatrix(Z2, {0}, ));
    map(S^{2: -r-1},,M)
    )

computeCounterexampleModp = method()
computeCounterexampleModp (ZZ,List,List) := (r,V,E) -> (
  deg1 := floor((9*r+2)/4);
  << "For r = " << r << ", the top degree of HH_0(J) should = " << deg1 << endl;
  --(V,E) := standardGraph();
  f := H0matrix(r, V, E);
  Rp := ZZ/32003[gens ring f];
  fp := sub(f, Rp);
  d1 := degreePart(deg1,fp);
  << "  In degree " << deg1 << ": (#rows,#cols,rank)=" << (numrows d1, numcols d1, rank d1) << endl;
  d2 := degreePart(deg1+1,fp);
  << "  In degree " << deg1+1 << ": (#rows,#cols,rank)=" << (numrows d2, numcols d2, rank d2) << endl;
  (fp, d1, d2)
  )        

H0bettiModp = method()
H0bettiModp (ZZ,List,List) := (r,V,E) -> (
    f := H0matrix(r,V,E);
    Rp := ZZ/32003[gens ring f];
    fp := sub(f, Rp);
    betti res coker fp
    )

HFModp = method()
HFModp (ZZ,ZZ,List,List) := (d,r,V,E) -> (
    f := H0matrix(r,V,E);
    Rp := ZZ/32003[gens ring f];
    fp := sub(f,Rp);
    hilbertFunction(d,coker fp)
    )

beginDocumentation()

doc ///
Key
  TwoInteriorEdges
Headline
  private code for investigating counterexamples to Schenck-Stiller
Description
  Text
    Here is an example use.  Note that the (V,E) used here has some real restrictions:
    the first 3 vertices in V are the interior ones, in a line, and the rest are the vertices
    which provide exactly 3 edges from each of these vertices.  If not, @TO "H0matrix"@ will give
    an error.  This example produces a nice version of the presentation matrix of the
    $H_0 J$ module.
  Example
    (V,E) = standardGraph()
    f = H0matrix(1, V, E)
///

doc ///
Key
  H0matrix
  (H0matrix, ZZ, List, List)
Headline
  Create a presentation matrix for H0 J
Usage
  f = H0matrix(r, V, E)
Inputs
  r:ZZ
    the smoothness of the splines, a non-negative integer.
  V:List
    a list of vertices.  The first 3 are the interior ones, in line.
  E:List
    a list of edges.  Each of the 3 interior vertices must have exactly 3 edges incident.
Outputs
  f:Matrix
    the presentation matrix of $HH_0(J)$.
Description
  Text
    Here is the standard counterexample of Beihui.

    The conjecture states that the last degree of $M = H_0(J)$
    is in degree $2r$.  Thus for $r = 2$, we obtain a counterexample
    since this is nonzero in degree 5.
    
    The conjecture is that the last nonzero degree of M is floor((9r+2)/4)
  Example
    (V,E) = standardGraph()
    f = H0matrix(2, V, E)
    M = coker f
    for i from 0 to 10 list hilbertFunction(i, M)
    assert(hilbertFunction(5,M) != 0)
Caveat
  This is not general code
SeeAlso
  "AlgebraicSplines::AlgebraicSplines"
///

TEST ///
  (V,E) = standardGraph()
  assert(V == {{-2, 0}, {0, -1}, {2, 0}, {0, -2}, {0, 2}, {0, 2}, {0, 2}, {0, -2}})
  assert(E == {{0, 1}, {1, 2}, {0, 3}, {0, 4}, {1, 5}, {2, 6}, {2, 7}})
  linforms = for e in E list linearForm(e,V)
  assert(linforms == {x+2*y+2*z, x-2*y-2*z, x+y+2*z, x-y+2*z, x, x+y-2*z, x-y-2*z})
///

TEST ///
  (V,E) = standardGraph()
  f = H0matrix(2, V, E)
  M = coker f
  assert(hilbertFunction(5,M) != 0)
  assert(hilbertFunction(6,M) == 0)
  P = lift(matrix basis(5, f), QQ)
  det P
  rank P
///

TEST ///
  (V,E) = standardGraph()
  f = H0matrix(3, V, E)
  M = coker f
  assert(hilbertFunction(7,M) != 0)
  assert(hilbertFunction(8,M) == 0)
///

TEST ///
  (V,E) = standardGraph()
  M = coker H0matrix(4, V, E)
  assert(hilbertFunction(9,M) != 0)
  assert(hilbertFunction(10,M) == 0)
///

TEST ///
  (V,E) = standardGraph()
  M = coker H0matrix(5, V, E)
  assert(hilbertFunction(11,M) != 0)
  assert(hilbertFunction(12,M) == 0)
///

TEST ///
  (V,E) = standardGraph()
  M = coker H0matrix(6, V, E)
  assert(hilbertFunction(14,M) != 0)
  assert(hilbertFunction(15,M) == 0)
///

end--

restart
needsPackage "TwoInteriorEdges"
(V,E) = standardGraph()
f = H0matrix(2, V, E)
f = H0matrix(7, V, E)

restart
uninstallPackage "TwoInteriorEdges"
restart
check "TwoInteriorEdges"
installPackage "TwoInteriorEdges"
viewHelp TwoInteriorEdges



restart
needsPackage "TwoInteriorEdges"
(V,E) = standardGraph()
f = H0matrix(3, V, E)
degreePart(6,f)
rank degreePart(7,f)
rank degreePart(8,f)
hilbertFunction(6, coker f) == 12-6

-- r=7
  restart
  needsPackage "TwoInteriorEdges"
  (V,E) = standardGraph()
  f = H0matrix(7, V, E)
  degreePart(12,f)
  hilbertFunction(12, coker f) == 30-6
  degreePart(13,f)
  hilbertFunction(13, coker f) == 42-18
  degreePart(16,f) -- 90x90
  rank degreePart(16,f) == 88 -- !!
  d17 = degreePart(17,f);
  assert((numrows d17, numcols d17, rank d17) == (110, 126, 110))

-- r=11
  restart
  needsPackage "TwoInteriorEdges"
  (V,E) = standardGraph()
  f = H0matrix(11, V, E)
  Rp = ZZ/32003[gens ring f]
  fp = sub(f, Rp)
  isHomogeneous fp
  d1 = degreePart(25,fp);
  (numrows d1, numcols d1, rank d1)
  d2 = degreePart(26,fp);
  (numrows d2, numcols d2, rank d2)

-- r=15
  restart
  needsPackage "TwoInteriorEdges"
  (fp, d1, d2) = computeCounterexampleModp 3;
  (fp, d1, d2) = computeCounterexampleModp 7;
  (fp, d1, d2) = computeCounterexampleModp 11;  
  (fp, d1, d2) = computeCounterexampleModp 15;
  (fp, d1, d2) = computeCounterexampleModp 19;  
  (fp, d1, d2) = computeCounterexampleModp 23;
  
